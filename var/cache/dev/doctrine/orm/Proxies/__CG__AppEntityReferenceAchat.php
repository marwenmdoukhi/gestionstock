<?php

namespace Proxies\__CG__\App\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class ReferenceAchat extends \App\Entity\ReferenceAchat implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\ReferenceAchat' . "\0" . 'id', '' . "\0" . 'App\\Entity\\ReferenceAchat' . "\0" . 'dateRefrence', '' . "\0" . 'App\\Entity\\ReferenceAchat' . "\0" . 'reference', '' . "\0" . 'App\\Entity\\ReferenceAchat' . "\0" . 'fourisseur', '' . "\0" . 'App\\Entity\\ReferenceAchat' . "\0" . 'achats'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\ReferenceAchat' . "\0" . 'id', '' . "\0" . 'App\\Entity\\ReferenceAchat' . "\0" . 'dateRefrence', '' . "\0" . 'App\\Entity\\ReferenceAchat' . "\0" . 'reference', '' . "\0" . 'App\\Entity\\ReferenceAchat' . "\0" . 'fourisseur', '' . "\0" . 'App\\Entity\\ReferenceAchat' . "\0" . 'achats'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (ReferenceAchat $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getDateRefrence(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateRefrence', []);

        return parent::getDateRefrence();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateRefrence(\DateTimeInterface $dateRefrence): \App\Entity\ReferenceAchat
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateRefrence', [$dateRefrence]);

        return parent::setDateRefrence($dateRefrence);
    }

    /**
     * {@inheritDoc}
     */
    public function getReference(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReference', []);

        return parent::getReference();
    }

    /**
     * {@inheritDoc}
     */
    public function setReference(string $reference): \App\Entity\ReferenceAchat
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setReference', [$reference]);

        return parent::setReference($reference);
    }

    /**
     * {@inheritDoc}
     */
    public function getFourisseur(): ?\App\Entity\Fourniseur
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFourisseur', []);

        return parent::getFourisseur();
    }

    /**
     * {@inheritDoc}
     */
    public function setFourisseur(?\App\Entity\Fourniseur $fourisseur): \App\Entity\ReferenceAchat
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFourisseur', [$fourisseur]);

        return parent::setFourisseur($fourisseur);
    }

    /**
     * {@inheritDoc}
     */
    public function getAchats(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAchats', []);

        return parent::getAchats();
    }

    /**
     * {@inheritDoc}
     */
    public function addAchat(\App\Entity\Achat $achat): \App\Entity\ReferenceAchat
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAchat', [$achat]);

        return parent::addAchat($achat);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAchat(\App\Entity\Achat $achat): \App\Entity\ReferenceAchat
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAchat', [$achat]);

        return parent::removeAchat($achat);
    }

}
